from unittest import TestCase

from profile_generator.main.profile_params import ProfileParams

from .profile_generator import generate

DEFAULT = {
    "HSVEnabled": "false",
    "HSVHCurve": "1;"
    + "0.0075536;0.5000000;0.1666667;0.1666667;"
    + "0.1399233;0.5000000;0.1666667;0.1666667;"
    + "0.4110729;0.5000000;0.1666667;0.1666667;"
    + "0.5077366;0.5000000;0.1666667;0.1666667;"
    + "0.5912647;0.5000000;0.1666667;0.1666667;"
    + "0.8534447;0.5000000;0.1666667;0.1666667;",
    "HSVSCurve": "1;"
    + "0.0075536;0.5000000;0.1666667;0.1666667;"
    + "0.1399233;0.5000000;0.1666667;0.1666667;"
    + "0.4110729;0.5000000;0.1666667;0.1666667;"
    + "0.5077366;0.5000000;0.1666667;0.1666667;"
    + "0.5912647;0.5000000;0.1666667;0.1666667;"
    + "0.8534447;0.5000000;0.1666667;0.1666667;",
    "HSVVCurve": "1;"
    + "0.0075536;0.5000000;0.1666667;0.1666667;"
    + "0.1399233;0.5000000;0.1666667;0.1666667;"
    + "0.4110729;0.5000000;0.1666667;0.1666667;"
    + "0.5077366;0.5000000;0.1666667;0.1666667;"
    + "0.5912647;0.5000000;0.1666667;0.1666667;"
    + "0.8534447;0.5000000;0.1666667;0.1666667;",
}


class ProfileGeneratorTest(TestCase):
    def test_process_default(self) -> None:
        self.assertEqual(generate(ProfileParams()), DEFAULT)

    def test_process_brilliance(self) -> None:
        profile_params = ProfileParams()
        profile_params.colors.grading.bsh.parse(
            {"red": [5, 0, 0], "magenta": [-5, 0, 0]}
        )
        self.assertEqual(
            generate(profile_params),
            {
                "HSVEnabled": "true",
                "HSVHCurve": "1;"
                + "0.0075536;0.4990768;0.1666667;0.1666667;"
                + "0.1399233;0.5000000;0.1666667;0.1666667;"
                + "0.4110729;0.5000000;0.1666667;0.1666667;"
                + "0.5077366;0.5000000;0.1666667;0.1666667;"
                + "0.5912647;0.5000000;0.1666667;0.1666667;"
                + "0.8534447;0.5005264;0.1666667;0.1666667;",
                "HSVSCurve": "1;"
                + "0.0075536;0.4955974;0.1666667;0.1666667;"
                + "0.1399233;0.5000000;0.1666667;0.1666667;"
                + "0.4110729;0.5000000;0.1666667;0.1666667;"
                + "0.5077366;0.5000000;0.1666667;0.1666667;"
                + "0.5912647;0.5000000;0.1666667;0.1666667;"
                + "0.8534447;0.4777423;0.1666667;0.1666667;",
                "HSVVCurve": "1;"
                + "0.0075536;0.2847659;0.1666667;0.1666667;"
                + "0.1399233;0.5000000;0.1666667;0.1666667;"
                + "0.4110729;0.5000000;0.1666667;0.1666667;"
                + "0.5077366;0.5000000;0.1666667;0.1666667;"
                + "0.5912647;0.5000000;0.1666667;0.1666667;"
                + "0.8534447;0.3449464;0.1666667;0.1666667;",
            },
        )

    def test_process_saturation(self) -> None:
        profile_params = ProfileParams()
        profile_params.colors.grading.bsh.parse(
            {
                "red": [0, 5, 0],
                "magenta": [0, -5, 0],
            }
        )
        self.assertEqual(
            generate(profile_params),
            {
                "HSVEnabled": "true",
                "HSVHCurve": "1;"
                + "0.0075536;0.9797399;0.1666667;0.1666667;"
                + "0.1399233;0.5000000;0.1666667;0.1666667;"
                + "0.4110729;0.5000000;0.1666667;0.1666667;"
                + "0.5077366;0.5000000;0.1666667;0.1666667;"
                + "0.5912647;0.5000000;0.1666667;0.1666667;"
                + "0.8534447;0.5021490;0.1666667;0.1666667;",
                "HSVSCurve": "1;"
                + "0.0075536;0.3501607;0.1666667;0.1666667;"
                + "0.1399233;0.5000000;0.1666667;0.1666667;"
                + "0.4110729;0.5000000;0.1666667;0.1666667;"
                + "0.5077366;0.5000000;0.1666667;0.1666667;"
                + "0.5912647;0.5000000;0.1666667;0.1666667;"
                + "0.8534447;0.3478237;0.1666667;0.1666667;",
                "HSVVCurve": "1;"
                + "0.0075536;0.3931629;0.1666667;0.1666667;"
                + "0.1399233;0.5000000;0.1666667;0.1666667;"
                + "0.4110729;0.5000000;0.1666667;0.1666667;"
                + "0.5077366;0.5000000;0.1666667;0.1666667;"
                + "0.5912647;0.5000000;0.1666667;0.1666667;"
                + "0.8534447;0.4598987;0.1666667;0.1666667;",
            },
        )

    def test_process_hue(self) -> None:
        profile_params = ProfileParams()
        profile_params.colors.grading.bsh.parse(
            {
                "yellow": [0, 0, -5],
                "green": [0, 0, 5],
                "cyan": [0, 0, 0],
                "blue": [0, 0, 5],
                "magenta": [0, 0, -5],
            }
        )
        self.assertEqual(
            generate(profile_params),
            {
                "HSVEnabled": "true",
                "HSVHCurve": "1;"
                + "0.0075536;0.5000000;0.1666667;0.1666667;"
                + "0.1399233;0.4999012;0.1666667;0.1666667;"
                + "0.4110729;0.5002681;0.1666667;0.1666667;"
                + "0.5077366;0.5000000;0.1666667;0.1666667;"
                + "0.5912647;0.5001218;0.1666667;0.1666667;"
                + "0.8534447;0.4998280;0.1666667;0.1666667;",
                "HSVSCurve": "1;"
                + "0.0075536;0.5000000;0.1666667;0.1666667;"
                + "0.1399233;0.4999984;0.1666667;0.1666667;"
                + "0.4110729;0.4989768;0.1666667;0.1666667;"
                + "0.5077366;0.5000000;0.1666667;0.1666667;"
                + "0.5912647;0.4989089;0.1666667;0.1666667;"
                + "0.8534447;0.4994833;0.1666667;0.1666667;",
                "HSVVCurve": "1;"
                + "0.0075536;0.5000000;0.1666667;0.1666667;"
                + "0.1399233;0.4996761;0.1666667;0.1666667;"
                + "0.4110729;0.4999604;0.1666667;0.1666667;"
                + "0.5077366;0.5000000;0.1666667;0.1666667;"
                + "0.5912647;0.4999969;0.1666667;0.1666667;"
                + "0.8534447;0.4997480;0.1666667;0.1666667;",
            },
        )

from unittest import TestCase

from profile_generator.main.profile_params import ProfileParams

from .profile_generator import generate

DEFAULT = {
    "HSVEnabled": "false",
    "HSVHCurve": "1;"
    + "0.0000000;0.5000000;0.1666667;0.1666667;"
    + "0.1666667;0.5000000;0.1666667;0.1666667;"
    + "0.3333333;0.5000000;0.1666667;0.1666667;"
    + "0.5000000;0.5000000;0.1666667;0.1666667;"
    + "0.6666667;0.5000000;0.1666667;0.1666667;"
    + "0.8333333;0.5000000;0.1666667;0.1666667;",
    "HSVSCurve": "1;"
    + "0.0000000;0.5000000;0.1666667;0.1666667;"
    + "0.1666667;0.5000000;0.1666667;0.1666667;"
    + "0.3333333;0.5000000;0.1666667;0.1666667;"
    + "0.5000000;0.5000000;0.1666667;0.1666667;"
    + "0.6666667;0.5000000;0.1666667;0.1666667;"
    + "0.8333333;0.5000000;0.1666667;0.1666667;",
    "HSVVCurve": "1;"
    + "0.0000000;0.5000000;0.1666667;0.1666667;"
    + "0.1666667;0.5000000;0.1666667;0.1666667;"
    + "0.3333333;0.5000000;0.1666667;0.1666667;"
    + "0.5000000;0.5000000;0.1666667;0.1666667;"
    + "0.6666667;0.5000000;0.1666667;0.1666667;"
    + "0.8333333;0.5000000;0.1666667;0.1666667;",
}


class ProfileGeneratorTest(TestCase):
    def test_process_default(self) -> None:
        self.assertEqual(generate(ProfileParams()), DEFAULT)

    def test_process_brilliance(self) -> None:
        profile_params = ProfileParams()
        profile_params.colors.grading.bsh.parse(
            {"red": [5, 0, 0], "magenta": [-5, 0, 0]}
        )
        self.assertEqual(
            generate(profile_params),
            {
                "HSVEnabled": "true",
                "HSVHCurve": "1;"
                + "0.0000000;0.4990827;0.1666667;0.1666667;"
                + "0.1666667;0.5000000;0.1666667;0.1666667;"
                + "0.3333333;0.5000000;0.1666667;0.1666667;"
                + "0.5000000;0.5000000;0.1666667;0.1666667;"
                + "0.6666667;0.5000000;0.1666667;0.1666667;"
                + "0.8333333;0.5005921;0.1666667;0.1666667;",
                "HSVSCurve": "1;"
                + "0.0000000;0.5396773;0.1666667;0.1666667;"
                + "0.1666667;0.5000000;0.1666667;0.1666667;"
                + "0.3333333;0.5000000;0.1666667;0.1666667;"
                + "0.5000000;0.5000000;0.1666667;0.1666667;"
                + "0.6666667;0.5000000;0.1666667;0.1666667;"
                + "0.8333333;0.4729475;0.1666667;0.1666667;",
                "HSVVCurve": "1;"
                + "0.0000000;0.3080766;0.1666667;0.1666667;"
                + "0.1666667;0.5000000;0.1666667;0.1666667;"
                + "0.3333333;0.5000000;0.1666667;0.1666667;"
                + "0.5000000;0.5000000;0.1666667;0.1666667;"
                + "0.6666667;0.5000000;0.1666667;0.1666667;"
                + "0.8333333;0.3498579;0.1666667;0.1666667;",
            },
        )

    def test_process_saturation(self) -> None:
        profile_params = ProfileParams()
        profile_params.colors.grading.bsh.parse(
            {
                "red": [0, 5, 0],
                "magenta": [0, -5, 0],
            }
        )
        self.assertEqual(
            generate(profile_params),
            {
                "HSVEnabled": "true",
                "HSVHCurve": "1;"
                + "0.0000000;0.4926248;0.1666667;0.1666667;"
                + "0.1666667;0.5000000;0.1666667;0.1666667;"
                + "0.3333333;0.5000000;0.1666667;0.1666667;"
                + "0.5000000;0.5000000;0.1666667;0.1666667;"
                + "0.6666667;0.5000000;0.1666667;0.1666667;"
                + "0.8333333;0.5020944;0.1666667;0.1666667;",
                "HSVSCurve": "1;"
                + "0.0000000;0.9808420;0.1666667;0.1666667;"
                + "0.1666667;0.5000000;0.1666667;0.1666667;"
                + "0.3333333;0.5000000;0.1666667;0.1666667;"
                + "0.5000000;0.5000000;0.1666667;0.1666667;"
                + "0.6666667;0.5000000;0.1666667;0.1666667;"
                + "0.8333333;0.3421526;0.1666667;0.1666667;",
                "HSVVCurve": "1;"
                + "0.0000000;0.4266890;0.1666667;0.1666667;"
                + "0.1666667;0.5000000;0.1666667;0.1666667;"
                + "0.3333333;0.5000000;0.1666667;0.1666667;"
                + "0.5000000;0.5000000;0.1666667;0.1666667;"
                + "0.6666667;0.5000000;0.1666667;0.1666667;"
                + "0.8333333;0.4481967;0.1666667;0.1666667;",
            },
        )

    def test_process_hue(self) -> None:
        profile_params = ProfileParams()
        profile_params.colors.grading.bsh.parse(
            {
                "yellow": [0, 0, -5],
                "green": [0, 0, 5],
                "cyan": [0, 0, 0],
                "blue": [0, 0, 5],
                "magenta": [0, 0, -5],
            }
        )
        self.assertEqual(
            generate(profile_params),
            {
                "HSVEnabled": "true",
                "HSVHCurve": "1;"
                + "0.0000000;0.5000000;0.1666667;0.1666667;"
                + "0.1666667;0.4998552;0.1666667;0.1666667;"
                + "0.3333333;0.5002960;0.1666667;0.1666667;"
                + "0.5000000;0.5000000;0.1666667;0.1666667;"
                + "0.6666667;0.5002260;0.1666667;0.1666667;"
                + "0.8333333;0.4997920;0.1666667;0.1666667;",
                "HSVSCurve": "1;"
                + "0.0000000;0.5000000;0.1666667;0.1666667;"
                + "0.1666667;0.5009087;0.1666667;0.1666667;"
                + "0.3333333;0.5023528;0.1666667;0.1666667;"
                + "0.5000000;0.5000000;0.1666667;0.1666667;"
                + "0.6666667;0.5003144;0.1666667;0.1666667;"
                + "0.8333333;0.5000109;0.1666667;0.1666667;",
                "HSVVCurve": "1;"
                + "0.0000000;0.5000000;0.1666667;0.1666667;"
                + "0.1666667;0.4997152;0.1666667;0.1666667;"
                + "0.3333333;0.4999467;0.1666667;0.1666667;"
                + "0.5000000;0.5000000;0.1666667;0.1666667;"
                + "0.6666667;0.4998733;0.1666667;0.1666667;"
                + "0.8333333;0.4997279;0.1666667;0.1666667;",
            },
        )
